.. _tut-using:

****************************
Пайтон хэлмэрчийг ашиглахуй
****************************


.. _tut-invoking:

Хэлмэрчийг дуудахуй
========================

Пайтон хэлмэрч голцуу :file:`/usr/local/bin/python` гэх хаягаар суугдсан байдаг
бөгөөд, Юникс бүрхүүлийн :file:`/usr/local/bin` хаяг руу шилжсэнээр ::

    python

хэмээх тушаалыг бүрхүүлд өгөн хэлмэрчийг эхлүүлж болно. 

Виндовс дээр Пайтон голцуу :file:`C:\\Python27` гэх хаягаар суугдсан байдаг ч
суулгах үедээ үүнийг тохируулж болдог. Энэ хавтасыг өөрийн path-д нэмэхийн тулд
тушаалын мөр дээр дараах тушаалыг бичиж ажиллуулна ::

   set path=%path%;C:\python27

Тушаалын мөр дээр файлын төгсгөлийн тэмдэгт (Юникс дээр :kbd:`Control-D`, Виндовс
дээр :kbd:`Control-Z`) бичсэнээр хэлмэрчийг салгадаг. Хэрвээ тэгээд ч болохгүй 
байвал ``quit()`` гэсэн тушаалаар салгаж болно.


Хэлмэрчийн ажиллагаа Юникс бүрхүүлтэй төстэй: ерийн оролтоор дуудахад тушаалыг
харилцан үйлчлэлтэйгээр (interactively) гүйцэтгэдэг; харин файлын нэр зааж эсвэл
файлыг стандарт оролт болгон дуудахад тэрхүү файл дахь *скриптийг* уншин гүйцэтгэдэг.

Хэлмэрчийг асаах нөгөө нэг арга нь ``python -c command [arg] ...`` тушаал ба энэ нь
*тушаал* дахь илэрхийлл(үүд)ийг гүйцэтгэх бөгөөд бүрхүүлийн :option:`-c` сонголттой
адил юм. Пайтон илэрхийлэлд ихэвчлэн хоосон зай болон бүрхүүлд хамаатай тусгай тэмдэгт
ашиглагддаг учраас *тушаалыг* бүхэлд нь дан хашилтанд хийх нь зүйтэй.

Зарим Пайтон модулийг скрипт болгон хэрэглэх нь ашигтай байдаг. Ингэхийн тулд
``python -m module [arg] ...`` тушаалыг дуудахад *модулийн* эх кодыг яг л тушаалын
мөр дээр бичсэн мэт гүйцэтгэдэг.

Скрипт файл ажиллуулахдаа заримдаа дараа нь харилцуурын (interactive) горимд
оруулах хэрэгтэй байдаг. Үүнийг :option:`-i` сонголтыг скриптийн өмнө оруулан хийж болно.

.. _tut-argpassing:

Параметр дамжуулах
------------------

Хэлмэрч скриптийн нэр болон нэмэлт параметрүүдийг ``sys.argv`` хэмээх хувьсагчид
хийн скриптэнд дамжуулдаг. Энэ хувьсагч бол тэмдэгт мөрийн жагсаалт юм. Урт нь
дор хаяж 1 нэгж байдаг: ямар ч скрипт, параметр өгөгдөөгүй үед ``sys.argv[0]``
хоосон тэмдэгт мөр байдаг. Харин скриптийн нэр ``'-'`` (стандарт оролт гэсэн үг)
гэж өгөгдсөн үед ``sys.argv[0]``-н утга ``'-'`` болно. :option:`-c` *тушаал* сонголт
хэрэглэгдэхэд ``sys.argv[0]``-н утга ``'-c'`` болно. :option:`-m` *модуль* сонголт 
хэрэглэгдэхэд ``sys.argv[0]``-н утга заагдсан модулийн бүтэн нэр болно. :option:`-c`
*тушаал* болон :option:`-m` *модуль* сонголтоос хойшхи сонголтууд Пайтон хэлмэрчийн
сонголт боловсруулалтанд ордоггүй, харин ``sys.argv`` хувьсагчид тушаал буюу модульд
хэрэглэгдэхээр үлддэг.

.. _tut-interactive:

Харилцуурын горим
-----------------

Тушаал терминалаас уншигдахад хэлмэрч *харилцуурын горимд* байдаг гэдэг. 
Энэ горимд дараагийн тушаалыг *үндсэн харилцуураар* гурван ихийн тэмдэгтэй 
(``>>>``), үргэлжлэлийн мөрийг *хоёрдогч харилцуураар* гурван цэгтэй (``...``)
хүлээж байдаг. Хэлмэрч анхны харилцуурыг хэвлэхийн өмнө хувилбарын
дугаар, зохиогчийн эрхийн мэдээллээр угтдаг::

   python
   Python 2.7 (#1, Feb 28 2010, 00:02:06)
   Type "help", "copyright", "credits" or "license" for more information.
   >>>

Олон мөрөөс бүтэх (жишээ нь блок) код бичих бол үргэлжлэлийн мөр хэрэглэгддэг.
Жишээ нь дараах :keyword:`if` илэрхийллийг харна уу::

   >>> the_world_is_flat = 1
   >>> if the_world_is_flat:
   ...     print "Be careful not to fall off!"
   ...
   Be careful not to fall off!


.. _tut-interp:

Хэлмэрч ба түүний орчин
=======================


.. _tut-error:

Алдааг хариулахуй
----------------

Алдаа гарахад хэлмэрч алдааны мэдээ болон функцийн замыг харуулдаг.
Харилцуурын горимд дараа нь үндсэн харилцуурт шилжих ба оролт файлаас ирсэн бол 

When an error occurs, the interpreter prints an error message and a stack trace.
In interactive mode, it then returns to the primary prompt; when input came from
a file, it exits with a nonzero exit status after printing the stack trace.
(Exceptions handled by an :keyword:`except` clause in a :keyword:`try` statement
are not errors in this context.)  Some errors are unconditionally fatal and
cause an exit with a nonzero exit; this applies to internal inconsistencies and
some cases of running out of memory.  All error messages are written to the
standard error stream; normal output from executed commands is written to
standard output.

Тасалдуулагч тэмдэгтийг (ихэвчлэн Control-C эсвэл DEL) үндсэн эсвэл хоёрдогч
харилцуурт оруулснаар оролтыг цуцалж үндсэн харилцуурт буцдаг. [#]_
Тушаал гүйцэтгэгдэж байх зуур тасалдуулбал :exc:`KeyboardInterrupt` онцгой
тохиолдол гардаг. Үүнийг :keyword:`try` илэрхийллээр хариулж болно.


.. _tut-scripts:

Пайтоны гүйцэтгэгддэг скрипт
----------------------------

BSD маягийн Юникс систем дээр Пайтон скриптийг шууд гүйцэтгэгддэг болгож
болдог. Жишээ нь бүрхүүлийн скриптийн эхэнд дараах мөрийг нэмэн, ::

   #! /usr/bin/env python

файлд гүйцэтгэгдэх горим олгож гүйцэтгэгддэг болгоно. ``#!`` гэсэн хоёр тэмдэгт
зайлшгүй хамгийн эхэнд байх ёстой. Зарим платформ дээр энэхүү эхний мөр Юникс
маягийн мөрийг төгсгөлтэй (``'\n'``) (Виндовсын ``'\r\n'`` бус) байх ёстой байдаг.
Пайтон чагт буюу ``'#'`` тэмдэгт тайлбар бичихэд хэрэглэгддэгийг санаарай.

Скриптэд гүйцэтгэгдэх горим буюу зөвшөөрөл олгохын тулд :program:`chmod` тушаалыг
ашиглана ::

   $ chmod +x myscript.py

Виндовс системд "гүйцэтгэгдэх горим" гэсэн зүйл байдаггүй. Пайтон ``.py`` өргөтгөлтэй
файлыг шууд ``python.exe`` програмтай хамааруулан ойлгодог болохоор аливаа
Пайтон файл дээр хоёр товшиход скрипт байдлаар ажилладаг. Өргөтгөл нь ``.pyw``
байж болох ба энэ тохиолдолд ерийн үед харагддаг консол цонх харагддаггүй.

Эх кодын кодчлол
----------------

Пайтоны эх кодонд ASCII-с өөр кодчлол ашиглах боломжтой. Хамгийн амар арга нь
``#!`` гэсэн тайлбартай мөрийн дараа бас нэгэн тусгай тайлбар оруулах юм::

   # -*- coding: encoding -*-

Ингэж зарласнаар тэр эх кодын файл дахь бүх тэмдэгтийг *encoding* (жишээ нь ``utf-8``)
кодчлолтой гэж үзэх юм.  

.. _tut-startup:

Эхлэлийн харилцуурт файл
------------------------

Пайтоныг харилцуурын горимд ашиглахад хэлмэрч асах бүрт тодорхой тушаалууд
гүйцэтгэгддэг байвал ажилд тустай байж магад. Ингэхийн тулд :envvar:`PYTHONSTARTUP` гэдэг
орчны хувьсагч үүсгэн эхлэлийн тушаалуудыг агуулсан скрипт файлын нэрийг оноож өгдөг.
Энэ бол Юникс бүрхүүлийн :file:`.profile` боломжтой адил юм.


.. XXX This should probably be dumped in an appendix, since most people
   don't use Python interactively in non-trivial ways.

Энэ файл Пайтон скриптээс тушаал уншихад бус, мөн тушаалын файлыг :file:`/dev/tty`
гэж заасан үед ч бус, зөвхөн харилцуурын сэшнд л уншигддаг юм. Эдгээр эхлэлийн
тушаал нь харилцуурын горим дахь тушаал яаж гүйцэтгэгддэг вэ, түүнтэй адилаар
гүйцэтгэгддэг бөгөөд тодорхойлогдож буй обьектууд, импортлож буй модулиуд
заавал дүрэм ёсоор байх албагүй гэсэн үг болно. Түүнчлэн ``sys.ps1`` ба ``sys.ps2``
хоёрын утгыг энэ файлд өөрчилж болно.


Тухайн ажиллаж буй хавтаснаас эхлэлийн нэмэлт файл уншъя гэвэл эхлэлийн ерөнхий
файлд иймэрхүү код бичих хэрэгтэй: ``if os.path.isfile('.pythonrc.py'): 
execfile('.pythonrc.py')``. Харин эхлэлийн файлыг скриптэнд хэрэглэе гэвэл
тухайлан зааж өгөх болно::

   import os
   filename = os.environ.get('PYTHONSTARTUP')
   if filename and os.path.isfile(filename):
       execfile(filename)


.. rubric:: Зүүлт

.. [#] GNU Readline богцоос ургадаг нэг асуудал үүнд саад болж магадгүй.

