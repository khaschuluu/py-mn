Жагсаалт төрөл
==============

Хэлний үндсэн төрөл болох жагсаалт нь объектууд болон утгуудыг эрэмбэтэйгээр эгнүүлэн хадгалсан өгөгдлийн бүтэц юм. "``list``" гэсэн төрөлтэй. 
Жагсаалт нь дараалан уншигдах өгөгдлөөс(``iterable``) ялгаатай гэдгийг анхаарах хэрэгтэй. 

Үүсгэх
------

Жагсаалтыг үүсгэхийн тулд дөрвөлжин хаалтанд утгуудыг таслалаар зай аван бичнэ: ::

   L = []
   L = [ утга_1, утга_2, ... ]

Дээрх аргаар жагсаалтыг дэлгэрэнгүй зарлаж үүсгэнэ. Мөн өөр дарааллаас хувиргалт хийх, шүүж үүсгэж болно: ::

   L = [ илэрхийлэл for хувьсагч in дараалал ]
   L = [ илэрхийлэл for хувьсагч in дараалал if нөхцөлт_илэрхийлэл ]

"``if``" оператор ашиглаж жагсаалтыг үүсгэхэд нөхцөлт илэрхийллээр элементүүдийг шүүж авах буюу нөхцөл хангахгүй элементүүдийг хасна.

Жагсаалт нь объект төрөл учир нэг жагсаалт төрлийн хувьсагчийн утгыг нөгөө жагсаалт төрлийн хувьсагч руу олгох үед заагч нь дамжиж ижилхэн жагсаалтыг заадаг. ::

   A = B = [] # хоёр хувьсагч хоёулаа ижилхэн
   A = []
   B = A # хоёулаа ижилхэн
   A = []; B = [] # хоёр тусдаа жагсаалт

``list()`` гэсэн функцийн тусламжтайгаар жагсаалтыг дөрвөлжин хаалт ашигладагтай адилаар үүсгэж болно. Дөрвөлжин хаалтан доторх зарлагааг list функцийн аргументаар нь өгнө. ::

  L = list()
  L = list(утга_1, утга_2, ...)

Жагсаалтад хандах
-----------------

Жагсаалтын элемент рүү хандахдаа дугаараар нь болон тодорхой интервал өгч хандах эсвэл интервалыг алхамтай нь хамт өгч хандаж болно. ::

  L[i] # i-р байрлал дах элемент
  L[i:j] # i-ээс j хүртэлх элемент. j-р элемент орохгүй буцах утга нь жагсаалт байна.

Задгай интервал өгч болно: ::

  L[i:] # i-р байрлалаас хойшхи жагсаалт
  L[:i] # i-р байрлалаас өмнөх жагсаалт

Алхам өгөх: ::

  L[i:j:k] # i-гээс j хүртэлх элементүүдээс k-гийн утгаар алхам хийж шүүнэ, i-ийн утгаар алхамын эхлэлийг авна.

Давталт хийх
------------

Жагсаалтын элемент дээгүүр давтахад янз бүрийн арга техникүүдийг ашигладаг.

**for-in**
   Давталт хийх оператор ашиглан элемент дээгүүр гүйнэ. ::

      for elem in L:
         # elem хувьсагч дээр үйлдэл хийх
         print elem
	
**range len**
   Индексээр нь жагсаалт руу хандах боломж олгоно. ::

      for index in range(len(L)):
         print "дугаар:", index, "утга:", L[index]

**enumerate**
   Индекс болон утгаар нь зэрэг хандана. ::

      for index, value in enumerate(L):
         print "дугаар:", index, "утга:", value

**iter**
   Дараалан уншигдах өгөгдөл рүү хувиргаж давтана. ::

      iter_L = iter(L)
      first_elem = iter_L.next()
      second_elem = iter_L.next()

**join**
   Текст төрлийн жагсаалтыг холбоход ашиглана. ::

      ", ".join(["би", "чихэр", "иддэггүй"])  ==>  "би, чихэр, иддэггүй"

Жагсаалтын функцүүд
-------------------

Дотоод функцүүдийн тусламжтайгаар жагсаалтыг янз бүрээр ашиглах боломжтой. Динамик зохион байгуулалтынхаа ачаар жагсаалтын дурын байрлалаас элемент устгах, нэмэх болдог. Stack, Queue төрлийн жагсаалтаар ашиглаж болно. ::

   x in s	   s дотор х байвал Үнэн, бусад тохиолдолд Худал
   x not in s      s дотор х байхгүй бол Үнэн, бусад тохиолдолд Худал
   s + t           хоёр жагсаалтыг араас нь эгнүүлэх
   s * n           s жагсаалтыг n удаа давтан эгнүүлнэ
   s[i]            i-р байрлал дах элемент
   s[i:j]          i-ээс j-р байрлал хүртэлх жагсаалт
   s[i:j:k]        к алхамтайгаар i-ээс j-р байрлал хүртэлх жагсаалт
   len(s)          s жагсаалтын урт 
   min(s)          хамгийн бага утгатай элемент	 
   max(s)          хамгийн их утгатай элемент
   del s[i]        i-р элементийг устгана. урт нэгээр хасагдана.

.. py:function:: list.append(x)

   x элементийг жагсаалтын ард нэмнэ

.. py:function:: list.extend(x)

   араас нь t-г эгнүүлэн сунгана

.. py:function:: list.sort()

   эрэмбэлнэ

.. py:function:: list.count(val)

   val утга хэдэн удаа орсныг тоолно.

.. py:function:: list.index(val)

   val-ийн байрлал

.. py:function:: list.pop()

   сүүлийн элементийг хасна

.. py:function:: list.remove(val)

   хамгийн эхэнд тааралдсан val утгатай элементийг хасна

.. py:function:: list.reverse()

   урвуулах

Эдгээр функцүүдийн ажиллах аргачлалуудыг нэмэлт функц өгснөөр өөрчилж болно. Жишээ нь: :py:func:`pop` буюу элемент хасах үйлдлийг индексийг нь аргументаар дамжуулж эхний элементийг хасах: ::

	s.pop(0)

Мөн эрэмбэлэх функцэд харьцуулах функцийн заагчийг дамжуулснаар энгийн өгөгдлөөс гадна объектуудыг хүртэл эрэмбэлнэ.

Гүйцэд мэдээлэл авах бол интерпретер дээрээ: ::

	help(list)

командыг өгч бүрэн мэдээлэл аваарай.

.. 
   sequence - дараалал
   list - жагсаалт
   iterable - дараалан уншигдах өгөгдөл
   sequence = list or iterable
